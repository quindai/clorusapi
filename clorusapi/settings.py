"""
Django settings for clorusapi project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = ['*']
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

AUTH_USER_MODEL='accounts.User'

# Application definition
CUSTOM_APPS = ['accounts', 'company', 'campaigns', 'comercial']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'drf_yasg',
    'corsheaders',
]


INSTALLED_APPS+=CUSTOM_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'clorusapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type':'apiKey',
            'in':'header',
            'name':'Authorization'
        }
        # 'api_key': {
        #     'type': 'apiKey',
        #     'in': 'header',
        #     'name': 'Authorization'
        # }
    },
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.AllowAllUsersModelBackend',
    'accounts.backends.CaseInsensitiveEmailBackend',)

REST_FRAMEWORK = {
    'NON_FIELD_ERRORS_KEY':'error',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'PAGE_SIZE':100,
}

WSGI_APPLICATION = 'clorusapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# EMAIL_BACKEND= 'django.core.mail.backends.console.EmailBackend'

EMAIL_BACKEND= config('EMAIL_BACKEND')
EMAIL_HOST_USER=config('EMAIL_HOST_USER')
EMAIL_HOST=config('EMAIL_HOST')
EMAIL_PORT=config('EMAIL_PORT')
EMAIL_USE_TLS=config('EMAIL_USE_TLS')
EMAIL_HOST_PASSWORD=config('EMAIL_HOST_PASS')

ACTIVATED_DATABASE = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASS'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    },
}

if DEBUG:
    ACTIVATED_DATABASE={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
DATABASES = {
    config('MYSQL_DB1_NAME'): {
        'ENGINE': 'mysql.connector.django',
        'OPTIONS': {
            'sql_mode': 'traditional',
        },
        'NAME': config('MYSQL_DB1_NAME'),
        'USER': config('MYSQL_DB_USER'),
        'PASSWORD': config('MYSQL_DB_PASS'),
        'HOST': config('MYSQL_DB_HOST'),
        'PORT': config('MYSQL_DB_PORT'),
    },
    config('MYSQL_DB2_NAME'): {
        'ENGINE': 'mysql.connector.django',
        'OPTIONS': {
            'sql_mode': 'traditional',
        },
        'NAME': config('MYSQL_DB2_NAME'),
        'USER': config('MYSQL_DB_USER'),
        'PASSWORD': config('MYSQL_DB_PASS'),
        'HOST': config('MYSQL_DB_HOST'),
        'PORT': config('MYSQL_DB_PORT'),
    },   
    # config('MYSQL_DB3_NAME'): {
    #     'ENGINE': 'mysql.connector.django',
    #     'OPTIONS': {
    #         'sql_mode': 'traditional',
    #     },
    #     'NAME': config('MYSQL_DB3_NAME'),
    #     'USER': config('MYSQL_DB_USER'),
    #     'PASSWORD': config('MYSQL_DB_PASS'),
    #     'HOST': config('MYSQL_DB_HOST'),
    #     'PORT': config('MYSQL_DB_PORT'),
    # },
    config('MYSQL_DB4_NAME'): {
        'ENGINE': 'mysql.connector.django',
        'OPTIONS': {
            'sql_mode': 'traditional',
        },
        'NAME': config('MYSQL_DB4_NAME'),
        'USER': config('MYSQL_DB_USER'),
        'PASSWORD': config('MYSQL_DB_PASS'),
        'HOST': config('MYSQL_DB_HOST'),
        'PORT': config('MYSQL_DB_PORT'),
    },
}

DATABASES.update(ACTIVATED_DATABASE)


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
